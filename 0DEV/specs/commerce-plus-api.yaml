openapi: 3.0.3
info:
  title: Commerce Plus API
  version: "2.3.1"
  description: >
    A comprehensive e-commerce API supporting product catalog, carts, orders,
    and users with OAuth2 and API key authentication. Includes pagination,
    filtering, idempotency, and webhooks.
servers:
  - url: https://commerce.example.com/api
components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/authorize
          tokenUrl: https://auth.example.com/token
          scopes:
            orders: Read and write orders
            products: Read product catalog
  schemas:
    Money:
      type: object
      properties:
        currency: { type: string, description: ISO 4217 currency code }
        amount: { type: number, format: float }
      required: [currency, amount]
    Product:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        price: { $ref: "#/components/schemas/Money" }
        tags:
          type: array
          items: { type: string }
      required: [id, name, price]
    CartItem:
      type: object
      properties:
        productId: { type: string }
        quantity: { type: integer }
      required: [productId, quantity]
    Order:
      type: object
      properties:
        id: { type: string }
        items:
          type: array
          items: { $ref: "#/components/schemas/CartItem" }
        total: { $ref: "#/components/schemas/Money" }
        status: { type: string, enum: [pending, paid, shipped, delivered, cancelled] }
      required: [id, items, total, status]
security:
  - apiKeyAuth: []
paths:
  /products:
    get:
      tags: [Products]
      summary: List products
      operationId: listProducts
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Full-text search term
        - in: query
          name: limit
          schema: { type: integer, default: 20, minimum: 1, maximum: 200 }
        - in: query
          name: cursor
          schema: { type: string }
          description: Cursor for pagination
      responses:
        "200":
          description: A page of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Product" }
                  nextCursor: { type: string, nullable: true }
              example:
                items: [{ "id": "p1", "name": "T-Shirt", "price": { "currency": "GBP", "amount": 15.99 } }]
                nextCursor: "abc123"
  /products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      operationId: getProduct
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Product" }
  /carts/{cartId}/items:
    post:
      tags: [Carts]
      summary: Add item to cart
      operationId: addItem
      parameters:
        - in: path
          name: cartId
          required: true
          schema: { type: string }
      requestBody:
        description: Item to add into the cart
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CartItem" }
            example:
              productId: "p1"
              quantity: 2
      responses:
        "201":
          description: Item added
  /orders:
    post:
      tags: [Orders]
      summary: Create order
      operationId: createOrder
      security:
        - oauth2: [orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId: { type: string }
                idempotencyKey: { type: string, description: Unique key to prevent duplicate orders }
              required: [cartId]
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Order" }
  /webhooks/orders:
    post:
      tags: [Webhooks]
      summary: Order webhook receiver
      operationId: orderWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Order" }
      responses:
        "200":
          description: Acknowledge webhook
